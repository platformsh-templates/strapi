{"version":3,"file":"http.js","sourceRoot":"","sources":["../../src/integrations/http.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Integration, Span, Transaction } from '@sentry/types';\nimport { fill, parseSemver } from '@sentry/utils';\nimport * as http from 'http';\nimport * as https from 'https';\n\nconst NODE_VERSION = parseSemver(process.versions.node);\n\n/** http module integration */\nexport class Http implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Http';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Http.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _breadcrumbs: boolean;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _tracing: boolean;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { breadcrumbs?: boolean; tracing?: boolean } = {}) {\n    this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n    this._tracing = typeof options.tracing === 'undefined' ? false : options.tracing;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // No need to instrument if we don't want to track anything\n    if (!this._breadcrumbs && !this._tracing) {\n      return;\n    }\n\n    const wrappedHandlerMaker = _createWrappedHandlerMaker(this._breadcrumbs, this._tracing);\n\n    const httpModule = require('http');\n    fill(httpModule, 'get', wrappedHandlerMaker);\n    fill(httpModule, 'request', wrappedHandlerMaker);\n\n    // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n    // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n    if (NODE_VERSION.major && NODE_VERSION.major > 8) {\n      const httpsModule = require('https');\n      fill(httpsModule, 'get', wrappedHandlerMaker);\n      fill(httpsModule, 'request', wrappedHandlerMaker);\n    }\n  }\n}\n\ntype OriginalHandler = () => http.ClientRequest;\ntype WrappedHandler = (options: string | http.ClientRequestArgs) => http.ClientRequest;\ntype WrappedHandlerMaker = (originalHandler: OriginalHandler) => WrappedHandler;\n\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\nfunction _createWrappedHandlerMaker(breadcrumbsEnabled: boolean, tracingEnabled: boolean): WrappedHandlerMaker {\n  return function wrappedHandlerMaker(originalHandler: OriginalHandler): WrappedHandler {\n    return function wrappedHandler(\n      this: typeof http | typeof https,\n      options: string | http.ClientRequestArgs,\n    ): http.ClientRequest {\n      const requestUrl = extractUrl(options);\n\n      // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original handler\n      if (isSentryRequest(requestUrl)) {\n        return originalHandler.apply(this, arguments);\n      }\n\n      let span: Span | undefined;\n      let transaction: Transaction | undefined;\n\n      const scope = getCurrentHub().getScope();\n      if (scope && tracingEnabled) {\n        transaction = scope.getTransaction();\n        if (transaction) {\n          span = transaction.startChild({\n            description: `${typeof options === 'string' || !options.method ? 'GET' : options.method} ${requestUrl}`,\n            op: 'request',\n          });\n        }\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalHandler\n        .apply(this, arguments)\n        .once('response', function(this: http.IncomingMessage, res: http.ServerResponse): void {\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('response', requestUrl, this, res);\n          }\n          if (tracingEnabled && span) {\n            span.setHttpStatus(res.statusCode);\n            cleanDescription(options, this, span);\n            span.finish();\n          }\n        })\n        .once('error', function(this: http.IncomingMessage): void {\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('error', requestUrl, this);\n          }\n          if (tracingEnabled && span) {\n            span.setHttpStatus(500);\n            cleanDescription(options, this, span);\n            span.finish();\n          }\n        });\n    };\n  };\n}\n\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(event: string, url: string, req: http.IncomingMessage, res?: http.ServerResponse): void {\n  if (!getCurrentHub().getIntegration(Http)) {\n    return;\n  }\n\n  getCurrentHub().addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        method: req.method,\n        status_code: res && res.statusCode,\n        url,\n      },\n      type: 'http',\n    },\n    {\n      event,\n      request: req,\n      response: res,\n    },\n  );\n}\n\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param url URL string or object containing the component parts\n * @returns Fully-formed URL\n */\nexport function extractUrl(url: string | http.ClientRequestArgs): string {\n  if (typeof url === 'string') {\n    return url;\n  }\n  const protocol = url.protocol || '';\n  const hostname = url.hostname || url.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  const port = !url.port || url.port === 80 || url.port === 443 ? '' : `:${url.port}`;\n  const path = url.path ? url.path : '/';\n\n  // internal routes end up with too many slashes\n  return `${protocol}//${hostname}${port}${path}`.replace('///', '/');\n}\n\n/**\n * Handle an edge case with urls in the span description. Runs just before the span closes because it relies on\n * data from the response object.\n *\n * @param requestOptions Configuration data for the request\n * @param response Response object\n * @param span Span representing the request\n */\nfunction cleanDescription(\n  requestOptions: string | http.ClientRequestArgs,\n  response: http.IncomingMessage,\n  span: Span,\n): void {\n  // There are some libraries which don't pass the request protocol in the options object, so attempt to retrieve it\n  // from the response and run the URL processing again. We only do this in the presence of a (non-empty) host value,\n  // because if we're missing both, it's likely we're dealing with an internal route, in which case we don't want to be\n  // jamming a random `http:` on the front of it.\n  if (typeof requestOptions !== 'string' && !Object.keys(requestOptions).includes('protocol') && requestOptions.host) {\n    // Neither http.IncomingMessage nor any of its ancestors have an `agent` property in their type definitions, and\n    // http.Agent doesn't have a `protocol` property in its type definition. Nonetheless, at least one request library\n    // (superagent) arranges things that way, so might as well give it a shot.\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      requestOptions.protocol = (response as any).agent.protocol;\n      span.description = `${requestOptions.method || 'GET'} ${extractUrl(requestOptions)}`;\n    } catch (error) {\n      // well, we tried\n    }\n  }\n}\n\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n */\nfunction isSentryRequest(url: string): boolean {\n  const client = getCurrentHub().getClient();\n  if (!url || !client) {\n    return false;\n  }\n\n  const dsn = client.getDsn();\n  if (!dsn) {\n    return false;\n  }\n\n  return url.indexOf(dsn.host) !== -1;\n}\n"]}